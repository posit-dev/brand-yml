# Logos and Images



# BrandLogo { #brand_yml.BrandLogo }

```python
BrandLogo(self, /, **data)
```

Brand Logos

`logo` stores a single brand logo or a set of logos at three different size
points and possibly in different color schemes. Store all of your brand's
logo or image assets in `images` with meaningful names. Logos can be mapped
to three preset sizes -- `small`, `medium`, and `large` -- and each can be
either a single logo file or a light/dark variant
([brand_yml.BrandLightDark](`brand_yml.BrandLightDark`)).

To attach alternative text to an image, provide the image as a dictionary
including `path` (the image location) and `alt` (the short, alternative
text describing the image).

## Attributes {.doc-section .doc-section-attributes}

images

:   [dict](`dict`)\[[str](`str`), [BrandLogoResource](`brand_yml.logo.BrandLogoResource`)\] \| None

    A dictionary containing any number of logos or brand images. You can
    refer to these images by their key name in `small`, `medium` or `large`.
    Local file paths should be relative to the `_brand.yml` source file.
    Remote files are also permitted; please use a full URL to the image.

    ```yaml
    logo:
      images:
        white: pandas_white.svg
        white_online: "https://upload.wikimedia.org/wikipedia/commons/e/ed/Pandas_logo.svg"
      small: white
    ```

small

:   [BrandLogoFileType](`brand_yml.logo.BrandLogoFileType`) \| None

    A small logo, typically used as an favicon or mobile app icon.

medium

:   [BrandLogoFileType](`brand_yml.logo.BrandLogoFileType`) \| None

    A medium-sized logo, typically used in the header of a website.

large

:   [BrandLogoFileType](`brand_yml.logo.BrandLogoFileType`) \| None

    A large logo, typically used in a larger format such as a title slide
    or in marketing materials.

## Examples {.doc-section .doc-section-examples}

::: {.panel-tabset}


###### Single Logo

```{.yaml filename="_brand.yml"}
logo: posit.png
```



###### Minimal

```{.yaml filename="_brand.yml"}
logo:
  small: logos/pandas/pandas_mark.svg
  medium: logos/pandas/pandas_secondary.svg
  large: logos/pandas/pandas.svg
```



###### Light/Dark Variants

```{.yaml filename="_brand.yml"}
logo:
  small: logos/pandas/pandas_mark.svg
  medium:
    light: logos/pandas/pandas_secondary.svg
    dark: logos/pandas/pandas_secondary_white.svg
  large: logos/pandas/pandas.svg
```



###### Complete

```{.yaml filename="_brand.yml"}
logo:
  images:
    mark: logos/pandas/pandas_mark.svg
    mark-white: logos/pandas/pandas_mark_white.svg
    secondary: logos/pandas/pandas_secondary.svg
    secondary-white: logos/pandas/pandas_secondary_white.svg
    pandas: logos/pandas/pandas.svg
    pandas-white: logos/pandas/pandas_white.svg
  small: mark
  medium:
    light: logos/pandas/pandas_secondary.svg
    dark: secondary-white
  large: pandas
```



###### Complete with Alt Text

```{.yaml filename="_brand.yml"}
logo:
  images:
    mark:
      path: logos/pandas/pandas_mark.svg
      alt: pandas logo with blue bars and yellow and pink dots
    mark-white: logos/pandas/pandas_mark_white.svg
    secondary: logos/pandas/pandas_secondary.svg
    secondary-white:
      path: logos/pandas/pandas_secondary_white.svg
      alt: pandas logo with bars and dots over the word "pandas"
    pandas: logos/pandas/pandas.svg
    pandas-white: logos/pandas/pandas_white.svg
  small: mark
  medium:
    light:
      path: logos/pandas/pandas_secondary.svg
      alt: pandas logo with bars and dots over the word "pandas"
    dark: secondary-white
  large:
    path: logos/pandas/pandas.svg
    alt: pandas bars and dots to the right of the word "pandas"
```

:::

## Methods

| Name | Description |
| --- | --- |
| [to_html](#brand_yml.BrandLogo.to_html) | Generate an HTML `img` tag or a set of `img` tags |

### to_html { #brand_yml.BrandLogo.to_html }

```python
BrandLogo.to_html(
    which,
    method='inline',
    selectors={'light': ['[data-bs-theme="light"]', '.quarto-light'], 'dark': ['[data-bs-theme="dark"]', '.quarto-dark']},
    **kwargs,
)
```

Generate an HTML `img` tag or a set of `img` tags

Creates an HTML `<img>` tag for the brand logo resource named by `which`
or a set of `<img>` tags if the resource includes light/dark variants.

#### Parameters {.doc-section .doc-section-parameters}

<code><span class="parameter-name">which</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\[\'small\', \'medium\', \'large\', \'smallest\', \'largest\'\] \| [str](`str`)</span></code>

:   The image to include by name. In addition to the named sizes---
    `"small"`, `"medium"` and `"large"`---`which` can be `"smallest"` or
    `"largest"` for the smallest or largest size available, or `which`
    can be the name of a named image in the `logo.images` dictionary.

<code><span class="parameter-name">method</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[LogoToHtmlMethodType](`brand_yml.logo.LogoToHtmlMethodType`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'inline'</span></code>

:   The method to use for embedding the logo in HTML. Options are:
    - `"inline"`: Embeds SVG directly in HTML or uses a base64-encoded
      data URI for other formats (default).
    - `"base64"`: Converts the image to a base64-encoded data URI.
    - `"relative"`: Uses a relative path to the image file. The relative
      path used is `_brand/` plus the path to the image file relative to
      the `_brand.yml` where it is defined.

<code><span class="parameter-name">selectors</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\[\'prefers-color-scheme\'\] \| [dict](`dict`)\[[str](`str`), [str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{'light': ['[data-bs-theme="light"]', '.quarto-light'], 'dark': ['[data-bs-theme="dark"]', '.quarto-dark']}</span></code>

:   CSS selectors used to indicate that light or dark mode is active.
    Use `selectors="prefers-color-scheme"` for a variant that uses
    media queries associated with the system color scheme, rather than
    specific CSS selectors.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[htmltools](`htmltools`).[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional keyword arguments to be passed to the img tag (or the
    container tag if an inline SVG is used).

#### Returns {.doc-section .doc-section-returns}

| Name   | Type                                                                                                                                | Description                                                                                                                                                                                                                                                |
|--------|-------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|        | [Union](`typing.Union`)\[[htmltools](`htmltools`).[Tag](`htmltools.Tag`), [htmltools](`htmltools`).[TagList](`htmltools.TagList`)\] | Returns an HTML `<img>` tag for a singular [](`brand_yml.BrandLogoResource`) or two HTML `<img>` tags with additional CSS to selectively hide the light or dark images when in the opposite color scheme for a [](`brand_yml.BrandLogoLightDarkResource`). |

#### See also {.doc-section .doc-section-see-also}


- [BrandLogoResource.to_html](`brand_yml.BrandLogoResource.to_html`)
- [BrandLogoLightDarkResource.to_html](`brand_yml.BrandLogoLightDarkResource.to_html`)

# logo.BrandLogoFileType { #brand_yml.logo.BrandLogoFileType }

`logo.BrandLogoFileType`

A logo image file can be either a local or URL file location with optional
alternative text ([](`brand_yml.BrandLogoResource`)) or a light-dark variant
that includes both a light and dark color scheme
([](`brand_yml.BrandLogoLightDarkResource`)).

# BrandLogoResource { #brand_yml.BrandLogoResource }

```python
BrandLogoResource(self, /, **data)
```

A logo resource, a file with optional alternative text

## Attributes

| Name | Description |
| --- | --- |
| [alt](#brand_yml.logo.BrandLogoResource.alt) | Alterative text for the image, used for accessibility. |
| [path](#brand_yml.logo.BrandLogoResource.path) | The path to the logo resource. This can be a local file or a URL. |

## Methods

| Name | Description |
| --- | --- |
| [to_html](#brand_yml.BrandLogoResource.to_html) | Generate an HTML img tag for the logo resource. |

### to_html { #brand_yml.BrandLogoResource.to_html }

```python
BrandLogoResource.to_html(method='inline', selectors=None, which='', **kwargs)
```

Generate an HTML img tag for the logo resource.

This method creates an HTML img tag based on the logo's path and
alternative text. If the logo is stored locally, it will be converted to
a data URI. For remote logos, the source URL will be used directly.

#### Parameters {.doc-section .doc-section-parameters}

<code><span class="parameter-name">method</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[LogoToHtmlMethodType](`brand_yml.logo.LogoToHtmlMethodType`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'inline'</span></code>

:   The method to use for embedding the logo in HTML. Options are:
    - `"inline"`: Embeds SVG directly in HTML or uses a base64-encoded
      data URI for other formats (default).
    - `"base64"`: Converts the image to a base64-encoded data URI.
    - `"relative"`: Uses a relative path to the image file. The relative
      path used is `_brand/` plus the path to the image file relative to
      the `_brand.yml` where it is defined.

<code><span class="parameter-name">selectors</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\[\'prefers-color-scheme\'\] \| [dict](`dict`)\[[str](`str`), [str](`str`) \| [list](`list`)\[[str](`str`)\]\] \| None</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Ignored, included for stable function signature across logo
    variations.

<code><span class="parameter-name">which</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">''</span></code>

:   Ignored, included for stable function signature across logo
    variations.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[htmltools](`htmltools`).[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional keyword arguments to be passed to the img tag (or the
    container tag if an inline SVG is used).

#### Returns {.doc-section .doc-section-returns}

| Name   | Type                                            | Description                            |
|--------|-------------------------------------------------|----------------------------------------|
|        | [htmltools](`htmltools`).[Tag](`htmltools.Tag`) | An HTML img tag representing the logo. |

#### Examples {.doc-section .doc-section-examples}

```{python}
from brand_yml import BrandLogoResource
small = BrandLogoResource(
    path="../../logos/icon/brand-yml-icon-color.png",
    alt="brand.yml icon"
)
print(small.to_html(class_="my-brand-icon"))
```

```{python}
small = BrandLogoResource(
    path="https://posit-dev.github.io/brand-yml/logos/icon/brand-yml-icon-color.png",
    alt="brand.yml remote icon"
)
small.to_html(width="32px", height="32px")
```

# BrandLogoLightDarkResource { #brand_yml.BrandLogoLightDarkResource }

```python
BrandLogoLightDarkResource(self, /, **data)
```

A pair of light and dark logo resources

## Methods

| Name | Description |
| --- | --- |
| [to_html](#brand_yml.BrandLogoLightDarkResource.to_html) | Generate a set of HTML img tags for the light/dark logo resource. |

### to_html { #brand_yml.BrandLogoLightDarkResource.to_html }

```python
BrandLogoLightDarkResource.to_html(
    method='inline',
    selectors={'light': ['[data-bs-theme="light"]', '.quarto-light'], 'dark': ['[data-bs-theme="dark"]', '.quarto-dark']},
    which='',
    **kwargs,
)
```

Generate a set of HTML img tags for the light/dark logo resource.

This method creates a pair of HTML img tags for each of the `light` and
`dark` logo variants using the logo's path and alternative text. If the
logo image is stored locally, it will be converted to a data URI. For
remote logos, the source URL will be used directly.

Additional CSS is included to ensure that the `light` logo is shown when
a light color scheme is used (dark text on a light background) and the
`dark` logo is shown when a dark color scheme is used (light text on a
dark background).

#### Parameters {.doc-section .doc-section-parameters}

<code><span class="parameter-name">method</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[LogoToHtmlMethodType](`brand_yml.logo.LogoToHtmlMethodType`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'inline'</span></code>

:   The method to use for embedding the logo in HTML. Options are:
    - `"inline"`: Embeds SVG directly in HTML or uses a base64-encoded
      data URI for other formats (default).
    - `"base64"`: Converts the image to a base64-encoded data URI.
    - `"relative"`: Uses a relative path to the image file. The relative
      path used is `_brand/` plus the path to the image file relative to
      the `_brand.yml` where it is defined.

<code><span class="parameter-name">selectors</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\[\'prefers-color-scheme\'\] \| [dict](`dict`)\[[str](`str`), [str](`str`) \| [list](`list`)\[[str](`str`)\]\] \| None</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{'light': ['[data-bs-theme="light"]', '.quarto-light'], 'dark': ['[data-bs-theme="dark"]', '.quarto-dark']}</span></code>

:   CSS selectors used to indicate that light or dark mode is active.
    Use `selectors="prefers-color-scheme"` for a variant that uses
    media queries associated with the system color scheme, rather than
    specific CSS selectors.

<code><span class="parameter-name">which</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">''</span></code>

:   Ignored, included for stable function signature across logo
    variations.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[htmltools](`htmltools`).[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional keyword arguments to be passed to the img tag (or the
    container tag if an inline SVG is used).

#### Returns {.doc-section .doc-section-returns}

| Name   | Type                                                    | Description                                                                                                               |
|--------|---------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|
|        | [htmltools](`htmltools`).[TagList](`htmltools.TagList`) | Two HTML `<img>` tags with additional CSS to selectively hide the light or dark images when in the opposite color scheme. |

#### Examples {.doc-section .doc-section-examples}

```{python}
from brand_yml import BrandLogoLightDarkResource
small = BrandLogoLightDarkResource(
    light = BrandLogoResource(
        path="../../logos/icon/brand-yml-icon-black.png",
        alt="brand.yml remote icon (light)"
    ),
    dark = BrandLogoResource(
        path="../../logos/icon/brand-yml-icon-color.png",
        alt="brand.yml remote icon (dark)"
    )
)

for item in small.to_html():  # `.to_html()` returns an `htmltools.TagList()`
    print(item)
```

```{python}
small = BrandLogoLightDarkResource(
    light = BrandLogoResource(
        path="https://posit-dev.github.io/brand-yml/logos/icon/brand-yml-icon-black.png",
        alt="brand.yml remote icon (light)"
    ),
    dark = BrandLogoResource(
        path="https://posit-dev.github.io/brand-yml/logos/icon/brand-yml-icon-color.png",
        alt="brand.yml remote icon (dark)"
    )
)
small.to_html(width="32px", height="32px")
```

# FileLocation { #brand_yml.FileLocation }

```python
FileLocation(self, /, root=PydanticUndefined, **data)
```

The base class for a file location, either a local or an online file.

Local files are handled by
[`brand_yml.file.FileLocationLocal`](`brand_yml.file.FileLocationLocal`)
and are always considered relative to the source `_brand.yml` file.

Online files are handled by
[`brand_yml.file.FileLocationUrl`](`brand_yml.file.FileLocationUrl`)
and are a URL starting with `https://` or `http://`. Absolute paths for
local or network files are supported via `FileLocationUrl` when using the
`file://` prefix.

# FileLocationLocal { #brand_yml.FileLocationLocal }

```python
FileLocationLocal(self, /, root=PydanticUndefined, **data)
```

A local file location.

When used in a `brand_yml.Brand` instance, this class carries both the
relative path to the file, relative to the source `_brand.yml`, and the
absolute path of the file on disk.

## Methods

| Name | Description |
| --- | --- |
| [absolute](#brand_yml.FileLocationLocal.absolute) | Absolute path of the file location, relative to the root directory. |
| [exists](#brand_yml.FileLocationLocal.exists) | Check that the file exists at its absolute path. |
| [relative](#brand_yml.FileLocationLocal.relative) | Relative path of the file location. |
| [set_root_dir](#brand_yml.FileLocationLocal.set_root_dir) | Update the root directory of this file location. |
| [validate_exists](#brand_yml.FileLocationLocal.validate_exists) | Validate that the file exists at its absolute path. |

### absolute { #brand_yml.FileLocationLocal.absolute }

```python
FileLocationLocal.absolute()
```

Absolute path of the file location, relative to the root directory.

Returns the absolute path to the file, relative to the root directory,
which is most typically the directory containing the `_brand.yml` file.

### exists { #brand_yml.FileLocationLocal.exists }

```python
FileLocationLocal.exists()
```

Check that the file exists at its absolute path.

### relative { #brand_yml.FileLocationLocal.relative }

```python
FileLocationLocal.relative()
```

Relative path of the file location.

Returns the relative path to the file as it would appear in the source
`_brand.yml` file.

### set_root_dir { #brand_yml.FileLocationLocal.set_root_dir }

```python
FileLocationLocal.set_root_dir(root_dir)
```

Update the root directory of this file location.

In general, the root directory is the parent directory containing the
source `brand_yml` file. If you relocate the file, this method can be
used to update the new local file location.

### validate_exists { #brand_yml.FileLocationLocal.validate_exists }

```python
FileLocationLocal.validate_exists()
```

Validate that the file exists at its absolute path.

#### Raises {.doc-section .doc-section-raises}

| Name   | Type                                     | Description                                                                            |
|--------|------------------------------------------|----------------------------------------------------------------------------------------|
|        | [FileNotFoundError](`FileNotFoundError`) | Raises a `FileNotFoundError` if the file does not exist at its absolute path location. |

# FileLocationUrl { #brand_yml.FileLocationUrl }

```python
FileLocationUrl(self, /, root=PydanticUndefined, **data)
```

A hosted, online file location, i.e. a URL.

A URL to a single file, typically an online file path starting with
`http://` or `https://`. This class can also be used for the absolute path
of local or networked files, which should start with `file://` (otherwise
local files are handled by
[`brand_yml.file.FileLocationLocal`](`brand_yml.file.FileLocationLocal`)).

# file.FileLocationLocalOrUrlType { #brand_yml.file.FileLocationLocalOrUrlType }

`file.FileLocationLocalOrUrlType`

A type representing a file location that may be a local path or URL.