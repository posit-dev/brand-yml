---
title: Open Questions
---

## Schema definition?

* [JSON Schema](https://json-schema.org/learn/getting-started-step-by-step)
* [Example yaml schema from Quarto](https://github.com/quarto-dev/quarto-cli/blob/8df775135b4b4197dc2f750bf0cf88393550fa2d/src/resources/schema/document-editor.yml)


## Assets?

It's unlikely that a `brand.yml` will be completely self-contained.
In many cases, users will want to include static assets, including:

* logo files
* images and icons
* stylesheets
* LaTeX includes
* custom fonts

We should consider using 
[Quarto extensions](https://quarto.org/docs/extensions/)
to bundle brand assets as [a custom format](https://quarto.org/docs/extensions/listing-formats.html)
or as [a starter template](https://quarto.org/docs/extensions/starter-templates.html).

## Light/dark themes?

Should `light` and `dark` be high up in the tree or on each field?

* Some fields won't have both
* Easier to see the full dark or full light theme when higher up
* In most cases dark mode is light mode with a small number of tweaks

```{.yaml filename="brand.yml (high-level light/dark)"}
logo:
  light:
    small:
    large:
  dark:
    small:
    large:
```

```{.yaml filename="brand.yml (local light/dark)"}
logo:
  small:
    light:
    dark:
  large:
    light:
    dark:
```

## Reusing fields?

`brand.yml` authors will need to re-use fields in various areas.
The most obvious of these are the interaction between named colors in the `palette` section
and semantic colors in the `theme` section of `color`.

For example, [Home Depot](../examples/brand-guidelines/home-depot/index.qmd) defines orange as `#F96302`.
The `brand.yml` author wants to use this specific color for as the primary accent color.

Below I've outlines several approaches.
You can also find more detailed examples in the [Color brand specficication](color.qmd#re-using-fields).

### Magic named color re-use

Probably the most simple option I've considered so far.
For `color` properties, we allow the re-use of named colors with the following rules:

1. In `color.theme` find the named color in `color.palette`.
2. In all other places, look for the color name in `color.theme` first, followed by `color.palette`.
3. Assume colors without a match are regular (i.e. CSS, etc.) color names.

```{.yaml filename="brand.yml"}
color:
  palette:
    orange: "#F96302"
  theme:
    primary: orange

typography:
  headings:
    color: primary
```

### Sass-like variables

Another option is to use Sass-like variables.

```{.yaml filename="brand.yml"}
color:
  palette:
    orange: "#F96302"
  theme:
    primary: "$orange"
```

This option is very close to how the variables are used in scss files,
but the `brand.yml` intends to support more formats than Sass and CSS outputs.

Additionally, `$orange` implies a top-level `orange` field,
but is actually defined in `color.palette.orange`.

Because these names are provided by users, it might be better to use a prefix like `$brand-` for the Sass variables.
(If it were easier to extract items from a Sass map, we'd use that instead, but `map-get($brand, orange)` isn't user-friendly.)

```{.yaml filename="brand.yml"}
color:
  palette:
    orange: "#F96302"
  theme:
    primary: "$brand-orange"
```

### CSS-like variables

Yet another option could be to use a CSS-like syntax:

```{.yaml filename="brand.yml"}
color:
  palette:
    orange: "#F96302"
  theme:
    primary: "--brand-orange"
typography:
  headings:
    color: "--brand-primary"
```

In this approach, we could easily detect `--brand-` variables and replace them with the appropriate values or wrap them in `var(--brand-...)` in CSS.

### Native YAML anchors and aliases

YAML has a native block re-use concept called _anchors_ and _aliases_.
It is not pretty and adds a lot of work for the end user.

```{.yaml filename="brand.yml"}
color:
  palette:
    orange: &orange "#F96302"
  theme:
    primary: *orange
```

It doesn't seem terrible in this small example,
but it's a lot of extra in larger brand definitions.

This does have the advantage of working with native constructs,
and all YAML readers and validators should be able to read and validate this format.

### Custom syntax

Another option is to use a custom syntax
that any `brand.yml` consumer will have to implement.
This syntax might look use Quarto shortcode-style syntax: `{{{< brand color palette ____ >}}}`.
While a bit more typing, this does suggest a `brand` shortcode that could be used directly in documents, e.g.

```markdown
## My Section {style='color: {{{< brand color palette secondary >}}}'}

{{{< brand logo large >}}}
```

In the `brand.yml` file itself, this might look like this:

```{.yaml filename="brand.yml" shortcodes="false"}
color:
  palette:
    orange: "#F96302"
  theme:
    primary: "{{< brand color palette orange >}}"
```

In general, the `{{< brand >}}`{shortcodes="false"} shortcode can access any value in the `brand.yml` heirarchy, where each argument is a key the object.
For example,

```{.markdown shortcodes="false"}
{{< brand x y z >}}
```

would be equivalent to `brand["x"]["y"]["z"]` in Python or JavaScript or `brand$x$y$z` in R.
